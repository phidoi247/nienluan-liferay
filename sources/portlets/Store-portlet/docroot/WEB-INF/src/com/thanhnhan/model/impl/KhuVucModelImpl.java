/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.thanhnhan.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.thanhnhan.model.KhuVuc;
import com.thanhnhan.model.KhuVucModel;
import com.thanhnhan.model.KhuVucSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the KhuVuc service. Represents a row in the &quot;MienTayAds_KhuVuc&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.thanhnhan.model.KhuVucModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link KhuVucImpl}.
 * </p>
 *
 * @author ThanhNhan
 * @see KhuVucImpl
 * @see com.thanhnhan.model.KhuVuc
 * @see com.thanhnhan.model.KhuVucModel
 * @generated
 */
@JSON(strict = true)
public class KhuVucModelImpl extends BaseModelImpl<KhuVuc>
	implements KhuVucModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a khu vuc model instance should use the {@link com.thanhnhan.model.KhuVuc} interface instead.
	 */
	public static final String TABLE_NAME = "MienTayAds_KhuVuc";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "khuVucId", Types.VARCHAR },
			{ "khuVucName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table MienTayAds_KhuVuc (id_ LONG not null primary key,khuVucId VARCHAR(75) null,khuVucName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table MienTayAds_KhuVuc";
	public static final String ORDER_BY_JPQL = " ORDER BY khuVuc.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MienTayAds_KhuVuc.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.thanhnhan.model.KhuVuc"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.thanhnhan.model.KhuVuc"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.thanhnhan.model.KhuVuc"),
			true);
	public static long KHUVUCID_COLUMN_BITMASK = 1L;
	public static long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static KhuVuc toModel(KhuVucSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		KhuVuc model = new KhuVucImpl();

		model.setId(soapModel.getId());
		model.setKhuVucId(soapModel.getKhuVucId());
		model.setKhuVucName(soapModel.getKhuVucName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<KhuVuc> toModels(KhuVucSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<KhuVuc> models = new ArrayList<KhuVuc>(soapModels.length);

		for (KhuVucSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.thanhnhan.model.KhuVuc"));

	public KhuVucModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return KhuVuc.class;
	}

	@Override
	public String getModelClassName() {
		return KhuVuc.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("khuVucId", getKhuVucId());
		attributes.put("khuVucName", getKhuVucName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String khuVucId = (String)attributes.get("khuVucId");

		if (khuVucId != null) {
			setKhuVucId(khuVucId);
		}

		String khuVucName = (String)attributes.get("khuVucName");

		if (khuVucName != null) {
			setKhuVucName(khuVucName);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public String getKhuVucId() {
		if (_khuVucId == null) {
			return StringPool.BLANK;
		}
		else {
			return _khuVucId;
		}
	}

	@Override
	public void setKhuVucId(String khuVucId) {
		_columnBitmask |= KHUVUCID_COLUMN_BITMASK;

		if (_originalKhuVucId == null) {
			_originalKhuVucId = _khuVucId;
		}

		_khuVucId = khuVucId;
	}

	public String getOriginalKhuVucId() {
		return GetterUtil.getString(_originalKhuVucId);
	}

	@JSON
	@Override
	public String getKhuVucName() {
		if (_khuVucName == null) {
			return StringPool.BLANK;
		}
		else {
			return _khuVucName;
		}
	}

	@Override
	public void setKhuVucName(String khuVucName) {
		_khuVucName = khuVucName;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			KhuVuc.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public KhuVuc toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (KhuVuc)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		KhuVucImpl khuVucImpl = new KhuVucImpl();

		khuVucImpl.setId(getId());
		khuVucImpl.setKhuVucId(getKhuVucId());
		khuVucImpl.setKhuVucName(getKhuVucName());

		khuVucImpl.resetOriginalValues();

		return khuVucImpl;
	}

	@Override
	public int compareTo(KhuVuc khuVuc) {
		long primaryKey = khuVuc.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof KhuVuc)) {
			return false;
		}

		KhuVuc khuVuc = (KhuVuc)obj;

		long primaryKey = khuVuc.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		KhuVucModelImpl khuVucModelImpl = this;

		khuVucModelImpl._originalKhuVucId = khuVucModelImpl._khuVucId;

		khuVucModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<KhuVuc> toCacheModel() {
		KhuVucCacheModel khuVucCacheModel = new KhuVucCacheModel();

		khuVucCacheModel.id = getId();

		khuVucCacheModel.khuVucId = getKhuVucId();

		String khuVucId = khuVucCacheModel.khuVucId;

		if ((khuVucId != null) && (khuVucId.length() == 0)) {
			khuVucCacheModel.khuVucId = null;
		}

		khuVucCacheModel.khuVucName = getKhuVucName();

		String khuVucName = khuVucCacheModel.khuVucName;

		if ((khuVucName != null) && (khuVucName.length() == 0)) {
			khuVucCacheModel.khuVucName = null;
		}

		return khuVucCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", khuVucId=");
		sb.append(getKhuVucId());
		sb.append(", khuVucName=");
		sb.append(getKhuVucName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.thanhnhan.model.KhuVuc");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>khuVucId</column-name><column-value><![CDATA[");
		sb.append(getKhuVucId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>khuVucName</column-name><column-value><![CDATA[");
		sb.append(getKhuVucName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = KhuVuc.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { KhuVuc.class };
	private long _id;
	private String _khuVucId;
	private String _originalKhuVucId;
	private String _khuVucName;
	private long _columnBitmask;
	private KhuVuc _escapedModel;
}