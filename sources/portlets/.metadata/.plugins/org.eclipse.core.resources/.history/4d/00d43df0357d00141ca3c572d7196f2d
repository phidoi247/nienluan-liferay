/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.thanhnhan.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.thanhnhan.model.TNOptions;
import com.thanhnhan.model.TNOptionsModel;
import com.thanhnhan.model.TNOptionsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TNOptions service. Represents a row in the &quot;MienTayAds_TNOptions&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.thanhnhan.model.TNOptionsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TNOptionsImpl}.
 * </p>
 *
 * @author ThanhNhan
 * @see TNOptionsImpl
 * @see com.thanhnhan.model.TNOptions
 * @see com.thanhnhan.model.TNOptionsModel
 * @generated
 */
@JSON(strict = true)
public class TNOptionsModelImpl extends BaseModelImpl<TNOptions>
	implements TNOptionsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a t n options model instance should use the {@link com.thanhnhan.model.TNOptions} interface instead.
	 */
	public static final String TABLE_NAME = "MienTayAds_TNOptions";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "option_name", Types.VARCHAR },
			{ "value", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table MienTayAds_TNOptions (id_ LONG not null primary key,option_name VARCHAR(75) null,value VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table MienTayAds_TNOptions";
	public static final String ORDER_BY_JPQL = " ORDER BY tnOptions.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MienTayAds_TNOptions.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.thanhnhan.model.TNOptions"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.thanhnhan.model.TNOptions"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.thanhnhan.model.TNOptions"),
			true);
	public static long ID_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TNOptions toModel(TNOptionsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TNOptions model = new TNOptionsImpl();

		model.setId(soapModel.getId());
		model.setOption_name(soapModel.getOption_name());
		model.setValue(soapModel.getValue());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TNOptions> toModels(TNOptionsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TNOptions> models = new ArrayList<TNOptions>(soapModels.length);

		for (TNOptionsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.thanhnhan.model.TNOptions"));

	public TNOptionsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TNOptions.class;
	}

	@Override
	public String getModelClassName() {
		return TNOptions.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("option_name", getOption_name());
		attributes.put("value", getValue());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String option_name = (String)attributes.get("option_name");

		if (option_name != null) {
			setOption_name(option_name);
		}

		String value = (String)attributes.get("value");

		if (value != null) {
			setValue(value);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask |= ID_COLUMN_BITMASK;

		if (!_setOriginalId) {
			_setOriginalId = true;

			_originalId = _id;
		}

		_id = id;
	}

	public long getOriginalId() {
		return _originalId;
	}

	@JSON
	@Override
	public String getOption_name() {
		if (_option_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _option_name;
		}
	}

	@Override
	public void setOption_name(String option_name) {
		_option_name = option_name;
	}

	@JSON
	@Override
	public String getValue() {
		if (_value == null) {
			return StringPool.BLANK;
		}
		else {
			return _value;
		}
	}

	@Override
	public void setValue(String value) {
		_value = value;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TNOptions.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TNOptions toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TNOptions)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TNOptionsImpl tnOptionsImpl = new TNOptionsImpl();

		tnOptionsImpl.setId(getId());
		tnOptionsImpl.setOption_name(getOption_name());
		tnOptionsImpl.setValue(getValue());

		tnOptionsImpl.resetOriginalValues();

		return tnOptionsImpl;
	}

	@Override
	public int compareTo(TNOptions tnOptions) {
		long primaryKey = tnOptions.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TNOptions)) {
			return false;
		}

		TNOptions tnOptions = (TNOptions)obj;

		long primaryKey = tnOptions.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TNOptionsModelImpl tnOptionsModelImpl = this;

		tnOptionsModelImpl._originalId = tnOptionsModelImpl._id;

		tnOptionsModelImpl._setOriginalId = false;

		tnOptionsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TNOptions> toCacheModel() {
		TNOptionsCacheModel tnOptionsCacheModel = new TNOptionsCacheModel();

		tnOptionsCacheModel.id = getId();

		tnOptionsCacheModel.option_name = getOption_name();

		String option_name = tnOptionsCacheModel.option_name;

		if ((option_name != null) && (option_name.length() == 0)) {
			tnOptionsCacheModel.option_name = null;
		}

		tnOptionsCacheModel.value = getValue();

		String value = tnOptionsCacheModel.value;

		if ((value != null) && (value.length() == 0)) {
			tnOptionsCacheModel.value = null;
		}

		return tnOptionsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", option_name=");
		sb.append(getOption_name());
		sb.append(", value=");
		sb.append(getValue());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.thanhnhan.model.TNOptions");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>option_name</column-name><column-value><![CDATA[");
		sb.append(getOption_name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>value</column-name><column-value><![CDATA[");
		sb.append(getValue());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TNOptions.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			TNOptions.class
		};
	private long _id;
	private long _originalId;
	private boolean _setOriginalId;
	private String _option_name;
	private String _value;
	private long _columnBitmask;
	private TNOptions _escapedModel;
}