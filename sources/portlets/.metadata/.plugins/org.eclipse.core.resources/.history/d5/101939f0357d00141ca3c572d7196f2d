/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.thanhnhan.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.thanhnhan.model.LoaiSP;
import com.thanhnhan.model.LoaiSPModel;
import com.thanhnhan.model.LoaiSPSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LoaiSP service. Represents a row in the &quot;MienTayAds_LoaiSP&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.thanhnhan.model.LoaiSPModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LoaiSPImpl}.
 * </p>
 *
 * @author ThanhNhan
 * @see LoaiSPImpl
 * @see com.thanhnhan.model.LoaiSP
 * @see com.thanhnhan.model.LoaiSPModel
 * @generated
 */
@JSON(strict = true)
public class LoaiSPModelImpl extends BaseModelImpl<LoaiSP>
	implements LoaiSPModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a loai s p model instance should use the {@link com.thanhnhan.model.LoaiSP} interface instead.
	 */
	public static final String TABLE_NAME = "MienTayAds_LoaiSP";
	public static final Object[][] TABLE_COLUMNS = {
			{ "loaiSPId", Types.BIGINT },
			{ "loaiSPName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table MienTayAds_LoaiSP (loaiSPId LONG not null primary key,loaiSPName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table MienTayAds_LoaiSP";
	public static final String ORDER_BY_JPQL = " ORDER BY loaiSP.loaiSPName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MienTayAds_LoaiSP.loaiSPName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.thanhnhan.model.LoaiSP"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.thanhnhan.model.LoaiSP"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.thanhnhan.model.LoaiSP"),
			true);
	public static long LOAISPID_COLUMN_BITMASK = 1L;
	public static long LOAISPNAME_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LoaiSP toModel(LoaiSPSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LoaiSP model = new LoaiSPImpl();

		model.setLoaiSPId(soapModel.getLoaiSPId());
		model.setLoaiSPName(soapModel.getLoaiSPName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LoaiSP> toModels(LoaiSPSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LoaiSP> models = new ArrayList<LoaiSP>(soapModels.length);

		for (LoaiSPSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.thanhnhan.model.LoaiSP"));

	public LoaiSPModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _loaiSPId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLoaiSPId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _loaiSPId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LoaiSP.class;
	}

	@Override
	public String getModelClassName() {
		return LoaiSP.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("loaiSPId", getLoaiSPId());
		attributes.put("loaiSPName", getLoaiSPName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long loaiSPId = (Long)attributes.get("loaiSPId");

		if (loaiSPId != null) {
			setLoaiSPId(loaiSPId);
		}

		String loaiSPName = (String)attributes.get("loaiSPName");

		if (loaiSPName != null) {
			setLoaiSPName(loaiSPName);
		}
	}

	@JSON
	@Override
	public long getLoaiSPId() {
		return _loaiSPId;
	}

	@Override
	public void setLoaiSPId(long loaiSPId) {
		_columnBitmask |= LOAISPID_COLUMN_BITMASK;

		if (!_setOriginalLoaiSPId) {
			_setOriginalLoaiSPId = true;

			_originalLoaiSPId = _loaiSPId;
		}

		_loaiSPId = loaiSPId;
	}

	public long getOriginalLoaiSPId() {
		return _originalLoaiSPId;
	}

	@JSON
	@Override
	public String getLoaiSPName() {
		if (_loaiSPName == null) {
			return StringPool.BLANK;
		}
		else {
			return _loaiSPName;
		}
	}

	@Override
	public void setLoaiSPName(String loaiSPName) {
		_columnBitmask = -1L;

		if (_originalLoaiSPName == null) {
			_originalLoaiSPName = _loaiSPName;
		}

		_loaiSPName = loaiSPName;
	}

	public String getOriginalLoaiSPName() {
		return GetterUtil.getString(_originalLoaiSPName);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LoaiSP.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LoaiSP toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LoaiSP)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LoaiSPImpl loaiSPImpl = new LoaiSPImpl();

		loaiSPImpl.setLoaiSPId(getLoaiSPId());
		loaiSPImpl.setLoaiSPName(getLoaiSPName());

		loaiSPImpl.resetOriginalValues();

		return loaiSPImpl;
	}

	@Override
	public int compareTo(LoaiSP loaiSP) {
		int value = 0;

		value = getLoaiSPName().compareTo(loaiSP.getLoaiSPName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LoaiSP)) {
			return false;
		}

		LoaiSP loaiSP = (LoaiSP)obj;

		long primaryKey = loaiSP.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LoaiSPModelImpl loaiSPModelImpl = this;

		loaiSPModelImpl._originalLoaiSPId = loaiSPModelImpl._loaiSPId;

		loaiSPModelImpl._setOriginalLoaiSPId = false;

		loaiSPModelImpl._originalLoaiSPName = loaiSPModelImpl._loaiSPName;

		loaiSPModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LoaiSP> toCacheModel() {
		LoaiSPCacheModel loaiSPCacheModel = new LoaiSPCacheModel();

		loaiSPCacheModel.loaiSPId = getLoaiSPId();

		loaiSPCacheModel.loaiSPName = getLoaiSPName();

		String loaiSPName = loaiSPCacheModel.loaiSPName;

		if ((loaiSPName != null) && (loaiSPName.length() == 0)) {
			loaiSPCacheModel.loaiSPName = null;
		}

		return loaiSPCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{loaiSPId=");
		sb.append(getLoaiSPId());
		sb.append(", loaiSPName=");
		sb.append(getLoaiSPName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.thanhnhan.model.LoaiSP");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>loaiSPId</column-name><column-value><![CDATA[");
		sb.append(getLoaiSPId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>loaiSPName</column-name><column-value><![CDATA[");
		sb.append(getLoaiSPName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LoaiSP.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { LoaiSP.class };
	private long _loaiSPId;
	private long _originalLoaiSPId;
	private boolean _setOriginalLoaiSPId;
	private String _loaiSPName;
	private String _originalLoaiSPName;
	private long _columnBitmask;
	private LoaiSP _escapedModel;
}