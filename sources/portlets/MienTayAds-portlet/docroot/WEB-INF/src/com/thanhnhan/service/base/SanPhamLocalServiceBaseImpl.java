/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.thanhnhan.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.thanhnhan.model.SanPham;

import com.thanhnhan.service.SanPhamLocalService;
import com.thanhnhan.service.persistence.KhuVucPersistence;
import com.thanhnhan.service.persistence.LoaiSPPersistence;
import com.thanhnhan.service.persistence.SanPhamPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the san pham local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.thanhnhan.service.impl.SanPhamLocalServiceImpl}.
 * </p>
 *
 * @author ThanhNhan
 * @see com.thanhnhan.service.impl.SanPhamLocalServiceImpl
 * @see com.thanhnhan.service.SanPhamLocalServiceUtil
 * @generated
 */
public abstract class SanPhamLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements SanPhamLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.thanhnhan.service.SanPhamLocalServiceUtil} to access the san pham local service.
	 */

	/**
	 * Adds the san pham to the database. Also notifies the appropriate model listeners.
	 *
	 * @param sanPham the san pham
	 * @return the san pham that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public SanPham addSanPham(SanPham sanPham) throws SystemException {
		sanPham.setNew(true);

		return sanPhamPersistence.update(sanPham);
	}

	/**
	 * Creates a new san pham with the primary key. Does not add the san pham to the database.
	 *
	 * @param spId the primary key for the new san pham
	 * @return the new san pham
	 */
	@Override
	public SanPham createSanPham(long spId) {
		return sanPhamPersistence.create(spId);
	}

	/**
	 * Deletes the san pham with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param spId the primary key of the san pham
	 * @return the san pham that was removed
	 * @throws PortalException if a san pham with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public SanPham deleteSanPham(long spId)
		throws PortalException, SystemException {
		return sanPhamPersistence.remove(spId);
	}

	/**
	 * Deletes the san pham from the database. Also notifies the appropriate model listeners.
	 *
	 * @param sanPham the san pham
	 * @return the san pham that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public SanPham deleteSanPham(SanPham sanPham) throws SystemException {
		return sanPhamPersistence.remove(sanPham);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(SanPham.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return sanPhamPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.thanhnhan.model.impl.SanPhamModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return sanPhamPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.thanhnhan.model.impl.SanPhamModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return sanPhamPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return sanPhamPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return sanPhamPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public SanPham fetchSanPham(long spId) throws SystemException {
		return sanPhamPersistence.fetchByPrimaryKey(spId);
	}

	/**
	 * Returns the san pham with the primary key.
	 *
	 * @param spId the primary key of the san pham
	 * @return the san pham
	 * @throws PortalException if a san pham with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public SanPham getSanPham(long spId)
		throws PortalException, SystemException {
		return sanPhamPersistence.findByPrimaryKey(spId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return sanPhamPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the san phams.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.thanhnhan.model.impl.SanPhamModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of san phams
	 * @param end the upper bound of the range of san phams (not inclusive)
	 * @return the range of san phams
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<SanPham> getSanPhams(int start, int end)
		throws SystemException {
		return sanPhamPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of san phams.
	 *
	 * @return the number of san phams
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getSanPhamsCount() throws SystemException {
		return sanPhamPersistence.countAll();
	}

	/**
	 * Updates the san pham in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param sanPham the san pham
	 * @return the san pham that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public SanPham updateSanPham(SanPham sanPham) throws SystemException {
		return sanPhamPersistence.update(sanPham);
	}

	/**
	 * Returns the khu vuc local service.
	 *
	 * @return the khu vuc local service
	 */
	public com.thanhnhan.service.KhuVucLocalService getKhuVucLocalService() {
		return khuVucLocalService;
	}

	/**
	 * Sets the khu vuc local service.
	 *
	 * @param khuVucLocalService the khu vuc local service
	 */
	public void setKhuVucLocalService(
		com.thanhnhan.service.KhuVucLocalService khuVucLocalService) {
		this.khuVucLocalService = khuVucLocalService;
	}

	/**
	 * Returns the khu vuc remote service.
	 *
	 * @return the khu vuc remote service
	 */
	public com.thanhnhan.service.KhuVucService getKhuVucService() {
		return khuVucService;
	}

	/**
	 * Sets the khu vuc remote service.
	 *
	 * @param khuVucService the khu vuc remote service
	 */
	public void setKhuVucService(
		com.thanhnhan.service.KhuVucService khuVucService) {
		this.khuVucService = khuVucService;
	}

	/**
	 * Returns the khu vuc persistence.
	 *
	 * @return the khu vuc persistence
	 */
	public KhuVucPersistence getKhuVucPersistence() {
		return khuVucPersistence;
	}

	/**
	 * Sets the khu vuc persistence.
	 *
	 * @param khuVucPersistence the khu vuc persistence
	 */
	public void setKhuVucPersistence(KhuVucPersistence khuVucPersistence) {
		this.khuVucPersistence = khuVucPersistence;
	}

	/**
	 * Returns the loai s p local service.
	 *
	 * @return the loai s p local service
	 */
	public com.thanhnhan.service.LoaiSPLocalService getLoaiSPLocalService() {
		return loaiSPLocalService;
	}

	/**
	 * Sets the loai s p local service.
	 *
	 * @param loaiSPLocalService the loai s p local service
	 */
	public void setLoaiSPLocalService(
		com.thanhnhan.service.LoaiSPLocalService loaiSPLocalService) {
		this.loaiSPLocalService = loaiSPLocalService;
	}

	/**
	 * Returns the loai s p remote service.
	 *
	 * @return the loai s p remote service
	 */
	public com.thanhnhan.service.LoaiSPService getLoaiSPService() {
		return loaiSPService;
	}

	/**
	 * Sets the loai s p remote service.
	 *
	 * @param loaiSPService the loai s p remote service
	 */
	public void setLoaiSPService(
		com.thanhnhan.service.LoaiSPService loaiSPService) {
		this.loaiSPService = loaiSPService;
	}

	/**
	 * Returns the loai s p persistence.
	 *
	 * @return the loai s p persistence
	 */
	public LoaiSPPersistence getLoaiSPPersistence() {
		return loaiSPPersistence;
	}

	/**
	 * Sets the loai s p persistence.
	 *
	 * @param loaiSPPersistence the loai s p persistence
	 */
	public void setLoaiSPPersistence(LoaiSPPersistence loaiSPPersistence) {
		this.loaiSPPersistence = loaiSPPersistence;
	}

	/**
	 * Returns the san pham local service.
	 *
	 * @return the san pham local service
	 */
	public com.thanhnhan.service.SanPhamLocalService getSanPhamLocalService() {
		return sanPhamLocalService;
	}

	/**
	 * Sets the san pham local service.
	 *
	 * @param sanPhamLocalService the san pham local service
	 */
	public void setSanPhamLocalService(
		com.thanhnhan.service.SanPhamLocalService sanPhamLocalService) {
		this.sanPhamLocalService = sanPhamLocalService;
	}

	/**
	 * Returns the san pham remote service.
	 *
	 * @return the san pham remote service
	 */
	public com.thanhnhan.service.SanPhamService getSanPhamService() {
		return sanPhamService;
	}

	/**
	 * Sets the san pham remote service.
	 *
	 * @param sanPhamService the san pham remote service
	 */
	public void setSanPhamService(
		com.thanhnhan.service.SanPhamService sanPhamService) {
		this.sanPhamService = sanPhamService;
	}

	/**
	 * Returns the san pham persistence.
	 *
	 * @return the san pham persistence
	 */
	public SanPhamPersistence getSanPhamPersistence() {
		return sanPhamPersistence;
	}

	/**
	 * Sets the san pham persistence.
	 *
	 * @param sanPhamPersistence the san pham persistence
	 */
	public void setSanPhamPersistence(SanPhamPersistence sanPhamPersistence) {
		this.sanPhamPersistence = sanPhamPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.thanhnhan.model.SanPham",
			sanPhamLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.thanhnhan.model.SanPham");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return SanPham.class;
	}

	protected String getModelClassName() {
		return SanPham.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = sanPhamPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.thanhnhan.service.KhuVucLocalService.class)
	protected com.thanhnhan.service.KhuVucLocalService khuVucLocalService;
	@BeanReference(type = com.thanhnhan.service.KhuVucService.class)
	protected com.thanhnhan.service.KhuVucService khuVucService;
	@BeanReference(type = KhuVucPersistence.class)
	protected KhuVucPersistence khuVucPersistence;
	@BeanReference(type = com.thanhnhan.service.LoaiSPLocalService.class)
	protected com.thanhnhan.service.LoaiSPLocalService loaiSPLocalService;
	@BeanReference(type = com.thanhnhan.service.LoaiSPService.class)
	protected com.thanhnhan.service.LoaiSPService loaiSPService;
	@BeanReference(type = LoaiSPPersistence.class)
	protected LoaiSPPersistence loaiSPPersistence;
	@BeanReference(type = com.thanhnhan.service.SanPhamLocalService.class)
	protected com.thanhnhan.service.SanPhamLocalService sanPhamLocalService;
	@BeanReference(type = com.thanhnhan.service.SanPhamService.class)
	protected com.thanhnhan.service.SanPhamService sanPhamService;
	@BeanReference(type = SanPhamPersistence.class)
	protected SanPhamPersistence sanPhamPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private SanPhamLocalServiceClpInvoker _clpInvoker = new SanPhamLocalServiceClpInvoker();
}